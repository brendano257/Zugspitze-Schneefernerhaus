"""
EBAS IO Setup Instructions: https://git.nilu.no/ebas/ebas-io/-/wikis/home

For my own purposes, I've cloned the ebas-io repository here, and installed with:

pip install ebas-io/dist/ebas_io-3.5.1-py3-none-any.whl

___________________________________________________________________________________

I started with ebas-io/Examples/ebas_genfile.py as a base for this submission.
Data is retrieved using finalization functions.
"""
from datetime import datetime, timedelta, timezone
from collections import defaultdict

from ebas.io.file import nasa_ames
from nilutility.datatypes import DataObject
from ebas.domain.basic_domain_logic.time_period import estimate_period_code, estimate_resolution_code, estimate_sample_duration_code

from processing.constants import EBAS_REPORTING_COMPOUNDS, DETECTION_LIMITS
from finalization.runtime import get_all_final_data_as_dicts, rejoin_all_final_data


def get_data():
    """Helper function that retrieves the Zugspitze data as [TK ----------------------------------------------------]"""
    final_data, final_filtered_data = get_all_final_data_as_dicts()
    final_joined_data = rejoin_all_final_data(final_data, final_filtered_data)

    all_dates = []
    for dates, _, _ in final_joined_data.values():
        all_dates.extend(dates)

    serial_data = defaultdict(dict)

    for compound, (dates, mrs, flags) in final_joined_data.items():
        for date, mr, flag in zip(dates, mrs, flags):

            # replace no-tz with UTC+1 (what raw datetime is in), then 'cast' it to UTC with astimezone
            date = date.replace(tzinfo=timezone(timedelta(hours=1))).astimezone(timezone.utc)

            serial_data[date][compound] = mr
            # 460 is ebas flag for "Contamination suspected", which is what our median/stdev filter picks out
            serial_data[date][f'{compound}_flags'] = [] if not flag else [460]

    return serial_data


def set_fileglobal_metadata(nas):
    """
    Set file global metadata for the EbasNasaAmes file object

    Parameters:
        nas    EbasNasaAmes file object
    Returns:
        None
    """
    # All times reported to EBAS need to be in UTC!
    # Setting the timezone here explicitly should remind you to check your data
    nas.metadata.timezone = 'UTC'

    # Revision information
    nas.metadata.revdate = datetime(2021, 3, 1, 0, 0, 0)
    nas.metadata.revision = '1'
    nas.metadata.revdesc = ('initial revision to ebas for data from 2018-01-01 -> 2021-03-01'
                            + 'generated by Brendan Blanchard using data finalization procedures specified in '
                            + 'https://github.com/brendano257/Zugspitze-Schneefernerhaus/finalization')

    # Data Originator Organisation
    nas.metadata.org = DataObject(
        OR_CODE='DE0054R',
        OR_NAME='Boulder AIR LLC',
        OR_ACRONYM='BOULDERAIR', OR_UNIT='',
        OR_ADDR_LINE1='2820 Lafayette Drive', OR_ADDR_LINE2=None,
        OR_ADDR_ZIP='80301', OR_ADDR_CITY='Boulder, Colorado', OR_ADDR_COUNTRY='United States')

    # Projects the data are associated to
    nas.metadata.projects = ['GAW']

    # Data Originators (PIs)
    nas.metadata.originator = []
    nas.metadata.originator.append(
        DataObject(
            PS_LAST_NAME='Helmig', PS_FIRST_NAME='Detlev', PS_EMAIL='dh.bouldair@gmail.com',
            PS_ORG_NAME='Boulder AIR LLC',
            PS_ORG_ACR='BOULDERAIR', PS_ORG_UNIT='',
            PS_ADDR_LINE1='2820 Lafayette Drive', PS_ADDR_LINE2=None,
            PS_ADDR_ZIP='80301', PS_ADDR_CITY='Boulder, Colorado',
            PS_ADDR_COUNTRY='United States',
            PS_ORCID=None,
        ))


    # Data Submitters (contact for data technical issues)
    nas.metadata.submitter = []
    nas.metadata.submitter.append(
        DataObject(
            PS_LAST_NAME='Blanchard', PS_FIRST_NAME='Brendan', PS_EMAIL='brendano257@gmail.com',
            PS_ORG_NAME='Boulder AIR LLC',
            PS_ORG_ACR='BOULDERAIR', PS_ORG_UNIT='',
            PS_ADDR_LINE1='6 River Road', PS_ADDR_LINE2=None,
            PS_ADDR_ZIP='03281', PS_ADDR_CITY='Weare, New Hampshire',
            PS_ADDR_COUNTRY='United States',
            PS_ORCID=None,
        ))

    # Station metadata
    nas.metadata.station_code = 'DE0054R'
    nas.metadata.platform_code = 'DE0054S'
    nas.metadata.station_name = 'Zugspitze-Schneefernerhaus'

    nas.metadata.station_wdca_id = 'GAWADE__ZSF'
    nas.metadata.station_gaw_id = 'ZSF'
    nas.metadata.station_gaw_name = 'Zugspitze-Schneefernerhaus'
    # nas.metadata.station_airs_id =    # N/A
    nas.metadata.station_other_ids = ''
    # nas.metadata.station_state_code =  # N/A
    nas.metadata.station_landuse = 'Gravel and stone'
    nas.metadata.station_setting = 'Mountain'
    nas.metadata.station_gaw_type = 'G'
    nas.metadata.station_wmo_region = 6
    nas.metadata.station_latitude = 47.4165
    nas.metadata.station_longitude = 10.97964
    nas.metadata.station_altitude = 2671.0

    # More file global metadata, but those can be overridden per variable
    # See set_variables for examples
    nas.metadata.instr_type = 'online_gc'
    nas.metadata.lab_code = 'US13L'
    nas.metadata.instr_name = 'UBA-GCMS'
    nas.metadata.method = 'US13L_ZSF_FCKW_SOP'
    nas.metadata.regime = 'IMG'
    nas.metadata.matrix = 'air'
    #nas.metadata.comp_name   will be set on variable level
    #nas.metadata.unit        will be set on variable level
    nas.metadata.statistics = 'arithmetic mean'
    nas.metadata.datalevel = '2'


def set_time_axes(nas, serial_data):
    """
    Set the time axes and related metadata for the EbasNasaAmes file object.

    Parameters:
        nas    EbasNasaAmes file object
    Returns:
        None
    """
    # define start and end times for all samples
    nas.sample_times = [
        (date, date + timedelta(minutes=40)) for date in sorted(serial_data.keys())
    ]

    #
    # Generate metadata that are related to the time axes:
    #

    # period code is an estimate of the current submissions period, so it should
    # always be calculated from the actual time axes, like this:
    nas.metadata.period = estimate_period_code(nas.sample_times[0][0],
                                               nas.sample_times[-1][1])

    # Sample duration can be set automatically
    nas.metadata.duration = estimate_sample_duration_code(nas.sample_times)
    # or set it hardcoded:
    # nas.metadata.duration = '3mo'

    # Resolution code can be set automatically
    # But be aware that resolution code is an identifying metadata element.
    # That means, several submissions of data (multiple years) will
    # only be stored as the same dataset if the resolution code is the same
    # for all submissions!
    # That might be a problem for time series with varying resolution code
    # (sometimes 2 months, sometimes 3 months, sometimes 9 weeks, ...). You
    # might consider using a fixed resolution code for those time series.
    # Automatic calculation (will work from ebas.io V.3.0.7):
    nas.metadata.resolution = estimate_resolution_code(nas.sample_times)
    # or set it hardcoded:
    # nas.metadata.resolution = '3mo'

    # It's a good practice to use Jan 1st of the year of the first sample
    # endtime as the file reference date (zero point of time axes).
    nas.metadata.reference_date = datetime(nas.sample_times[0][1].year, 1, 1)


def set_variables(nas, serial_data):
    """
    Set metadata and data for all variables for the EbasNasaAmes file object.

    Parameters:
        nas    EbasNasaAmes file object
    Returns:
        None
    """

    for compound in EBAS_REPORTING_COMPOUNDS:
        values = []
        flags = []

        metadata = DataObject()
        metadata.comp_name = compound
        metadata.unit = 'pmol/mol'

        for date, data in serial_data.items():
            mr = data.get(compound)  # None if not found
            flag_set = data.get(f'{compound}_flags', [])  # no flags if None are found

            if mr is None:
                flag_set = [999]  # unspecified missing value

            values.append(mr)
            flags.append(flag_set)

        if compound in DETECTION_LIMITS:
            pass  # TODO: how to give/not give detection limits?

        nas.variables.append(
            DataObject(values_=values, flags=flags, flagcol=True, metadata=metadata)
        )


def ebas_genfile():
    """
    Main program for ebas_flatcsv
    Created for lexical scoping.

    Parameters:
        None
    Returns:
        none
    """

    serial_data = get_data()

    # Create an EbasNasaAmes file object
    nas = nasa_ames.EbasNasaAmes()

    # Set file global metadata
    set_fileglobal_metadata(nas)

    # Set the time axes and related metadata
    set_time_axes(nas, serial_data)

    # Set metadata and data for all variables
    set_variables(nas, serial_data)

    # write the file:
    nas.write(createfiles=True)
    # createfiles=True
    #     Actually creates output files, else the output would go to STDOUT.
    # You can also specify:
    #     destdir='path/to/directory'
    #         Specify a specific relative or absolute path to a directory the
    #         files should be written to
    #     flags=FLAGS_COMPRESS
    #         Compresses the file size by reducing flag columns.
    #         Flag columns will be less explicit and thus less intuitive for
    #         humans to read.
    #     flags=FLAGS_ALL
    #         Always generate one flag column per variable. Very intuitive to
    #         read, but increases filesize.
    #     The default for flags is: Generate one flag column per file if the
    #     flags are the same for all variables in the file. Else generate one
    #     flag column per variable.
    #     This is a trade-off between the advantages and disadvantages of the
    #     above mentioned approaches.


if __name__ == '__main__':
    ebas_genfile()